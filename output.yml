Resources:
  MyVpcF9F0CA6F:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/Resource
  MyVpcpubSubnet1SubnetC19C9C3E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/pubSubnet1
        - Key: aws-cdk:subnet-name
          Value: pub
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet1/Subnet
  MyVpcpubSubnet1RouteTable012226D0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/pubSubnet1
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet1/RouteTable
  MyVpcpubSubnet1RouteTableAssociation6226153B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcpubSubnet1RouteTable012226D0
      SubnetId:
        Ref: MyVpcpubSubnet1SubnetC19C9C3E
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet1/RouteTableAssociation
  MyVpcpubSubnet1DefaultRouteA2DD0BC7:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcpubSubnet1RouteTable012226D0
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet1/DefaultRoute
  MyVpcpubSubnet1EIPFE8DC70C:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet1/EIP
  MyVpcpubSubnet1NATGateway0AF1143D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcpubSubnet1EIPFE8DC70C
          - AllocationId
      SubnetId:
        Ref: MyVpcpubSubnet1SubnetC19C9C3E
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/pubSubnet1
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet1/NATGateway
  MyVpcpubSubnet2Subnet4A377027:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/pubSubnet2
        - Key: aws-cdk:subnet-name
          Value: pub
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet2/Subnet
  MyVpcpubSubnet2RouteTableFDBED96C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/pubSubnet2
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet2/RouteTable
  MyVpcpubSubnet2RouteTableAssociation77C63E2B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcpubSubnet2RouteTableFDBED96C
      SubnetId:
        Ref: MyVpcpubSubnet2Subnet4A377027
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet2/RouteTableAssociation
  MyVpcpubSubnet2DefaultRouteB93DA352:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcpubSubnet2RouteTableFDBED96C
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet2/DefaultRoute
  MyVpcpubSubnet2EIP4B124ADF:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet2/EIP
  MyVpcpubSubnet2NATGateway0DE432EA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcpubSubnet2EIP4B124ADF
          - AllocationId
      SubnetId:
        Ref: MyVpcpubSubnet2Subnet4A377027
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/pubSubnet2
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/pubSubnet2/NATGateway
  MyVpcpriSubnet1SubnetD706DFB2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/priSubnet1
        - Key: aws-cdk:subnet-name
          Value: pri
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/priSubnet1/Subnet
  MyVpcpriSubnet1RouteTableD1D2EA5B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/priSubnet1
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/priSubnet1/RouteTable
  MyVpcpriSubnet1RouteTableAssociationE5CC1472:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcpriSubnet1RouteTableD1D2EA5B
      SubnetId:
        Ref: MyVpcpriSubnet1SubnetD706DFB2
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/priSubnet1/RouteTableAssociation
  MyVpcpriSubnet1DefaultRouteDB09A32D:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcpriSubnet1RouteTableD1D2EA5B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcpubSubnet1NATGateway0AF1143D
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/priSubnet1/DefaultRoute
  MyVpcpriSubnet2Subnet9750489B:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/priSubnet2
        - Key: aws-cdk:subnet-name
          Value: pri
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/priSubnet2/Subnet
  MyVpcpriSubnet2RouteTableBCF13437:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc/priSubnet2
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/priSubnet2/RouteTable
  MyVpcpriSubnet2RouteTableAssociation01D63129:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcpriSubnet2RouteTableBCF13437
      SubnetId:
        Ref: MyVpcpriSubnet2Subnet9750489B
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/priSubnet2/RouteTableAssociation
  MyVpcpriSubnet2DefaultRoute60AECE7E:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcpriSubnet2RouteTableBCF13437
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcpubSubnet2NATGateway0DE432EA
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/priSubnet2/DefaultRoute
  MyVpcIGW5C4A4F63:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: FargateCicdEnvStack/MyVpc
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/IGW
  MyVpcVPCGW488ACE0D:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      InternetGatewayId:
        Ref: MyVpcIGW5C4A4F63
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyVpc/VPCGW
  MyCluster4C1BA579:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyCluster/Resource
  MyFargateServiceTaskDefTaskRole62C7D397:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/TaskDef/TaskRole/Resource
  MyFargateServiceTaskDef5DA17B39:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: amazon/amazon-ecs-sample
          Links:
            []
          LinuxParameters:
            Capabilities:
              Add:
                []
              Drop:
                []
            Devices:
              []
            Tmpfs:
              []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: MyFargateServiceLoggingLogGroup271A17C2
              awslogs-stream-prefix: MyFargateService
              awslogs-region:
                Ref: AWS::Region
          MountPoints:
            []
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Ulimits:
            []
          VolumesFrom:
            []
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - MyFargateServiceTaskDefExecutionRoleD6305504
          - Arn
      Family: FargateCicdEnvStackMyFargateServiceTaskDefFEFD8811
      Memory: 1GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - MyFargateServiceTaskDefTaskRole62C7D397
          - Arn
      Volumes:
        []
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/TaskDef/Resource
  MyFargateServiceTaskDefExecutionRoleD6305504:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/TaskDef/ExecutionRole/Resource
  MyFargateServiceTaskDefExecutionRoleDefaultPolicyEC22B20F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MyFargateServiceLoggingLogGroup271A17C2
                - Arn
        Version: "2012-10-17"
      PolicyName: MyFargateServiceTaskDefExecutionRoleDefaultPolicyEC22B20F
      Roles:
        - Ref: MyFargateServiceTaskDefExecutionRoleD6305504
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/TaskDef/ExecutionRole/DefaultPolicy/Resource
  MyFargateServiceLoggingLogGroup271A17C2:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/Logging/LogGroup/Resource
  MyFargateServiceF490C034:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: MyFargateServiceTaskDef5DA17B39
      Cluster:
        Ref: MyCluster4C1BA579
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn:
            Ref: MyFargateServiceLBPublicListenerECSGroup4A3EDF05
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - MyFargateServiceSecurityGroup7016792A
                - GroupId
          Subnets:
            - Ref: MyVpcpriSubnet1SubnetD706DFB2
            - Ref: MyVpcpriSubnet2Subnet9750489B
    DependsOn:
      - MyFargateServiceLBPublicListener61A1042F
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/Service/Service
  MyFargateServiceSecurityGroup7016792A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: FargateCicdEnvStack/MyFargateService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        []
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/Service/SecurityGroup/Resource
  MyFargateServiceSecurityGroupfromFargateCicdEnvStackMyFargateServiceLBSecurityGroup6615350380195D2178:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - MyFargateServiceSecurityGroup7016792A
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MyFargateServiceLBSecurityGroup6FBF16F1
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/Service/SecurityGroup/from
        FargateCicdEnvStackMyFargateServiceLBSecurityGroup66153503:80
  MyFargateServiceLBDE830E97:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        []
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - MyFargateServiceLBSecurityGroup6FBF16F1
            - GroupId
      Subnets:
        - Ref: MyVpcpubSubnet1SubnetC19C9C3E
        - Ref: MyVpcpubSubnet2Subnet4A377027
      Type: application
    DependsOn:
      - MyVpcIGW5C4A4F63
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/LB/Resource
  MyFargateServiceLBSecurityGroup6FBF16F1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB
        FargateCicdEnvStackMyFargateServiceLB49BDF745
      SecurityGroupEgress:
        []
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/LB/SecurityGroup/Resource
  MyFargateServiceLBSecurityGrouptoFargateCicdEnvStackMyFargateServiceSecurityGroupD61D3D92805C64F130:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - MyFargateServiceLBSecurityGroup6FBF16F1
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - MyFargateServiceSecurityGroup7016792A
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/LB/SecurityGroup/to
        FargateCicdEnvStackMyFargateServiceSecurityGroupD61D3D92:80
  MyFargateServiceLBPublicListener61A1042F:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: MyFargateServiceLBPublicListenerECSGroup4A3EDF05
          Type: forward
      LoadBalancerArn:
        Ref: MyFargateServiceLBDE830E97
      Port: 80
      Protocol: HTTP
      Certificates:
        []
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/LB/PublicListener/Resource
  MyFargateServiceLBPublicListenerECSGroup4A3EDF05:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: MyVpcF9F0CA6F
      TargetGroupAttributes:
        []
      Targets:
        []
      TargetType: ip
    Metadata:
      aws:cdk:path: FargateCicdEnvStack/MyFargateService/LB/PublicListener/ECSGroup/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=0.22.0,@aws-cdk/assets=0.22.0,@aws-cdk/assets-docker=0.22.0,@aws-cdk/aws-applicationautoscaling=0.22.0,@aws-cdk/aws-autoscaling=0.22.0,@aws-cdk/aws-autoscaling-common=0.22.0,@aws-cdk/aws-certificatemanager=0.22.0,@aws-cdk/aws-cloudformation=0.22.0,@aws-cdk/aws-cloudwatch=0.22.0,@aws-cdk/aws-codedeploy-api=0.22.0,@aws-cdk/aws-codepipeline-api=0.22.0,@aws-cdk/aws-ec2=0.22.0,@aws-cdk/aws-ecr=0.22.0,@aws-cdk/aws-ecs=0.22.0,@aws-cdk/aws-elasticloadbalancingv2=0.22.0,@aws-cdk/aws-events=0.22.0,@aws-cdk/aws-iam=0.22.0,@aws-cdk/aws-kms=0.22.0,@aws-cdk/aws-lambda=0.22.0,@aws-cdk/aws-logs=0.22.0,@aws-cdk/aws-route53=0.22.0,@aws-cdk/aws-s3=0.22.0,@aws-cdk/aws-s3-notifications=0.22.0,@aws-cdk/aws-sns=0.22.0,@aws-cdk/aws-sqs=0.22.0,@aws-cdk/cdk=0.22.0,@aws-cdk/cx-api=0.22.0,jsii-runtime=node.js/v8.14.0
Outputs:
  MyFargateServiceLoadBalancerDNS704F6391:
    Value:
      Fn::GetAtt:
        - MyFargateServiceLBDE830E97
        - DNSName
    Export:
      Name: FargateCicdEnvStack:MyFargateServiceLoadBalancerDNS704F6391

